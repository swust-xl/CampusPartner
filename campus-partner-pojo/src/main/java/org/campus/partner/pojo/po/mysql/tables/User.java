/*
 * This file is generated by jOOQ.
*/
package org.campus.partner.pojo.po.mysql.tables;


import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.campus.partner.pojo.po.mysql.CampusPartner;
import org.campus.partner.pojo.po.mysql.Keys;
import org.campus.partner.pojo.po.mysql.tables.records.UserRecord;
import org.campus.partner.util.converter.DateConverter;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = -718306953;

    /**
     * The reference instance of <code>campus_partner.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>campus_partner.user.id</code>. 自增主键id
     */
    public final TableField<UserRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "自增主键id");

    /**
     * The column <code>campus_partner.user.object_id</code>. 用户全局 ID
     */
    public final TableField<UserRecord, byte[]> OBJECT_ID = createField("object_id", org.jooq.impl.SQLDataType.VARBINARY.length(255).nullable(false), this, "用户全局 ID");

    /**
     * The column <code>campus_partner.user.auth_datetime</code>. 用户认证时间
     */
    public final TableField<UserRecord, Date> AUTH_DATETIME = createField("auth_datetime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "用户认证时间", new DateConverter());

    /**
     * The column <code>campus_partner.user.auth_id</code>. 用户认证 ID，取学号为 ID
     */
    public final TableField<UserRecord, String> AUTH_ID = createField("auth_id", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "用户认证 ID，取学号为 ID");

    /**
     * The column <code>campus_partner.user.auth_type</code>. 认证类型
     */
    public final TableField<UserRecord, Integer> AUTH_TYPE = createField("auth_type", org.jooq.impl.SQLDataType.INTEGER, this, "认证类型");

    /**
     * The column <code>campus_partner.user.qq</code>. QQ
     */
    public final TableField<UserRecord, String> QQ = createField("qq", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "QQ");

    /**
     * The column <code>campus_partner.user.wechat</code>. 微信
     */
    public final TableField<UserRecord, String> WECHAT = createField("wechat", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "微信");

    /**
     * The column <code>campus_partner.user.phone</code>. 电话
     */
    public final TableField<UserRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "电话");

    /**
     * The column <code>campus_partner.user.avatar_url</code>. 头像 Url
     */
    public final TableField<UserRecord, String> AVATAR_URL = createField("avatar_url", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "头像 Url");

    /**
     * The column <code>campus_partner.user.nickname</code>. 昵称
     */
    public final TableField<UserRecord, String> NICKNAME = createField("nickname", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "昵称");

    /**
     * The column <code>campus_partner.user.gender</code>. 用户性别；0-男；1-女
     */
    public final TableField<UserRecord, Integer> GENDER = createField("gender", org.jooq.impl.SQLDataType.INTEGER, this, "用户性别；0-男；1-女");

    /**
     * The column <code>campus_partner.user.auth_data</code>. 微信认证信息
     */
    public final TableField<UserRecord, String> AUTH_DATA = createField("auth_data", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "微信认证信息");

    /**
     * The column <code>campus_partner.user.open_id</code>. 用户 open ID
     */
    public final TableField<UserRecord, String> OPEN_ID = createField("open_id", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "用户 open ID");

    /**
     * The column <code>campus_partner.user.is_authed</code>. 用户是否认证；0-否；1-是
     */
    public final TableField<UserRecord, Integer> IS_AUTHED = createField("is_authed", org.jooq.impl.SQLDataType.INTEGER, this, "用户是否认证；0-否；1-是");

    /**
     * The column <code>campus_partner.user.auth_institution_id</code>. 用户认证机构 ID
     */
    public final TableField<UserRecord, String> AUTH_INSTITUTION_ID = createField("auth_institution_id", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "用户认证机构 ID");

    /**
     * The column <code>campus_partner.user.auth_institution</code>. 用户认证机构名
     */
    public final TableField<UserRecord, String> AUTH_INSTITUTION = createField("auth_institution", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "用户认证机构名");

    /**
     * Create a <code>campus_partner.user</code> table reference
     */
    public User() {
        this("user", null);
    }

    /**
     * Create an aliased <code>campus_partner.user</code> table reference
     */
    public User(String alias) {
        this(alias, USER);
    }

    private User(String alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(String alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CampusPartner.CAMPUS_PARTNER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(String alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(name, null);
    }
}
