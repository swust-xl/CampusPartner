/*
 * This file is generated by jOOQ.
*/
package org.campus.partner.pojo.po.mysql;


import javax.annotation.Generated;

import org.campus.partner.pojo.po.mysql.tables.CompanionRoom;
import org.campus.partner.pojo.po.mysql.tables.Feedback;
import org.campus.partner.pojo.po.mysql.tables.RoomMember;
import org.campus.partner.pojo.po.mysql.tables.Subscribe;
import org.campus.partner.pojo.po.mysql.tables.User;
import org.campus.partner.pojo.po.mysql.tables.records.CompanionRoomRecord;
import org.campus.partner.pojo.po.mysql.tables.records.FeedbackRecord;
import org.campus.partner.pojo.po.mysql.tables.records.RoomMemberRecord;
import org.campus.partner.pojo.po.mysql.tables.records.SubscribeRecord;
import org.campus.partner.pojo.po.mysql.tables.records.UserRecord;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>campus_partner</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<CompanionRoomRecord, Long> IDENTITY_COMPANION_ROOM = Identities0.IDENTITY_COMPANION_ROOM;
    public static final Identity<FeedbackRecord, Long> IDENTITY_FEEDBACK = Identities0.IDENTITY_FEEDBACK;
    public static final Identity<RoomMemberRecord, Long> IDENTITY_ROOM_MEMBER = Identities0.IDENTITY_ROOM_MEMBER;
    public static final Identity<SubscribeRecord, Long> IDENTITY_SUBSCRIBE = Identities0.IDENTITY_SUBSCRIBE;
    public static final Identity<UserRecord, Long> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CompanionRoomRecord> KEY_COMPANION_ROOM_PRIMARY = UniqueKeys0.KEY_COMPANION_ROOM_PRIMARY;
    public static final UniqueKey<FeedbackRecord> KEY_FEEDBACK_PRIMARY = UniqueKeys0.KEY_FEEDBACK_PRIMARY;
    public static final UniqueKey<RoomMemberRecord> KEY_ROOM_MEMBER_PRIMARY = UniqueKeys0.KEY_ROOM_MEMBER_PRIMARY;
    public static final UniqueKey<SubscribeRecord> KEY_SUBSCRIBE_PRIMARY = UniqueKeys0.KEY_SUBSCRIBE_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<CompanionRoomRecord, Long> IDENTITY_COMPANION_ROOM = createIdentity(CompanionRoom.COMPANION_ROOM, CompanionRoom.COMPANION_ROOM.ID);
        public static Identity<FeedbackRecord, Long> IDENTITY_FEEDBACK = createIdentity(Feedback.FEEDBACK, Feedback.FEEDBACK.ID);
        public static Identity<RoomMemberRecord, Long> IDENTITY_ROOM_MEMBER = createIdentity(RoomMember.ROOM_MEMBER, RoomMember.ROOM_MEMBER.ID);
        public static Identity<SubscribeRecord, Long> IDENTITY_SUBSCRIBE = createIdentity(Subscribe.SUBSCRIBE, Subscribe.SUBSCRIBE.ID);
        public static Identity<UserRecord, Long> IDENTITY_USER = createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<CompanionRoomRecord> KEY_COMPANION_ROOM_PRIMARY = createUniqueKey(CompanionRoom.COMPANION_ROOM, "KEY_companion_room_PRIMARY", CompanionRoom.COMPANION_ROOM.ID);
        public static final UniqueKey<FeedbackRecord> KEY_FEEDBACK_PRIMARY = createUniqueKey(Feedback.FEEDBACK, "KEY_feedback_PRIMARY", Feedback.FEEDBACK.ID);
        public static final UniqueKey<RoomMemberRecord> KEY_ROOM_MEMBER_PRIMARY = createUniqueKey(RoomMember.ROOM_MEMBER, "KEY_room_member_PRIMARY", RoomMember.ROOM_MEMBER.ID);
        public static final UniqueKey<SubscribeRecord> KEY_SUBSCRIBE_PRIMARY = createUniqueKey(Subscribe.SUBSCRIBE, "KEY_subscribe_PRIMARY", Subscribe.SUBSCRIBE.ID);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.ID);
    }
}
